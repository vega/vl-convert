name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  python-fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.41.4
      - name: Check cargo fmt compliance
        run: pixi run fmt-py-check

  rust-fmt-clippy:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.41.4
      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: True
      - name: Check cargo fmt compliance
        run: pixi run fmt-rs-check
      - name: Check no rustc warnings
        run: pixi run check-rs
      - name: Check for clippy warnings
        run: pixi run clippy

  cargo-bundle-license:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.41.4
      - name: Check that license is up to date
        run: pixi run bundle-licenses
      - name: Check that git detects no file changes
        run: git diff --exit-code

  codegen-clean:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.41.4
      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: True
      - name: Run codegen
        run: pixi run vendor
      - name: Check that git detects no file changes
        run: git diff --exit-code

  vl-convert-rs-tests-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          cache-on-failure: True
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install fonts on Linux
        run: |
          echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
          sudo apt-get install ttf-mscorefonts-installer
      - name: Run rs tests
        # Run tests on single thread for Deno, which expects this
        run: |
          cargo test -p vl-convert-rs -- --test-threads=1
      - name: Run CLI tests
        run: |
          cargo test -p vl-convert -- --test-threads=1
      - name: Upload test failures
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: failed-images
          path: |
            vl-convert-rs/tests/vl-specs/failed

  vl-convert-rs-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-2022
          - macos-12
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.41.4
      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          cache-on-failure: True
      - name: Run tests
        run: |
          pixi run test-rs
          pixi run test-cli
      - name: Upload test failures
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: failed-images
          path: |
            vl-convert-rs/tests/vl-specs/failed

  # Wheel building jobs from Release.yml
  build-wheels-linux-x86_64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - "x86_64-unknown-linux-gnu"
    steps:
      - uses: actions/checkout@v3
      - uses: messense/maturin-action@v1
        with:
          manylinux: auto
          target: ${{ matrix.arch }}
          command: build
          args: --release -m vl-convert-python/Cargo.toml --sdist -o dist --strip
          before-script-linux: |
            # Install a newer clang (5+) and dependencies
            yum install -y centos-release-scl
            yum install -y llvm-toolset-7-clang llvm-toolset-7-clang-devel
            source /opt/rh/llvm-toolset-7/enable
            clang --version

            # Install additional dependencies for ring crate
            yum install -y pkg-config perl make gcc gcc-c++

            # Install protoc
            PB_REL="https://github.com/protocolbuffers/protobuf/releases"
            curl -LO $PB_REL/download/v24.0/protoc-24.0-linux-x86_64.zip
            unzip protoc-24.0-linux-x86_64.zip -d /usr/
        env:
          LIBSQLITE3_SYS_BUNDLING: 1
          LIBSQLITE3_SYS_USE_BINDGEN: 0
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist

  build-wheels-linux-aarch64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - uses: messense/maturin-action@v1
        with:
          manylinux: auto
          container: quay.io/pypa/manylinux2014_aarch64
          target: aarch64-unknown-linux-gnu
          command: build
          args: --release -m vl-convert-python/Cargo.toml --sdist -o dist --strip
          before-script-linux: |
            # Install a newer clang (5+) and dependencies
            yum install -y centos-release-scl
            yum install -y llvm-toolset-7-clang llvm-toolset-7-clang-devel
            source /opt/rh/llvm-toolset-7/enable
            clang --version

            # Install additional dependencies for ring crate
            yum install -y pkg-config perl make gcc gcc-c++

            # Install protoc
            echo $PATH
            PB_REL="https://github.com/protocolbuffers/protobuf/releases"
            curl -LO $PB_REL/download/v24.0/protoc-24.0-linux-aarch_64.zip
            unzip protoc-24.0-linux-aarch_64.zip -d /usr/
        env:
          LIBSQLITE3_SYS_BUNDLING: 1
          LIBSQLITE3_SYS_USE_BINDGEN: 0
          CARGO_FEATURE_FLAGS: "ring/use_heap"
          CC: "clang"
          CXX: "clang++"
      - name: Rename files
        run: |
          sudo apt-get update
          sudo apt-get install rename
          ls dist/
          rename 's/x86_64/aarch64/g' dist/vl_convert_python-*.whl
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-aarch64
          path: dist

  build-wheels-win-64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: messense/maturin-action@v1
        with:
          command: build
          args: --release -m vl-convert-python/Cargo.toml -o dist --strip
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-win-64
          path: dist

  build-wheels-osx-64:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Build Intel wheels
        uses: messense/maturin-action@v1
        with:
          command: build
          args: --release -m vl-convert-python/Cargo.toml -i python3.10 -o dist --strip
          target: x86_64-apple-darwin
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-osx-64
          path: dist

  build-wheels-osx-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v3
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Build arm64 wheels
        uses: messense/maturin-action@v1
        with:
          command: build
          args: --release -m vl-convert-python/Cargo.toml -i python3.10 -o dist --strip
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-osx-arm64
          path: dist

  # CLI building jobs from Release.yml
  build-cli-linux-x86:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          # Install clang 9 (Ubuntu 22.04 has newer versions available)
          sudo apt-get install -y clang-9 libclang-9-dev llvm-9-dev
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 100
          clang --version

          # Other dependencies
          sudo apt-get install -y pkg-config perl make gcc g++ cmake
      - name: Install protoc
        run: |
          sudo apt-get install protobuf-compiler
      - name: Build vl-convert
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p vl-convert --release
        env:
          LIBSQLITE3_SYS_BUNDLING: 1
          LIBSQLITE3_SYS_USE_BINDGEN: 0
          CARGO_FEATURE_FLAGS: "ring/use_heap"
          CC: "clang"
          CXX: "clang++"
      - name: Move executable to bin directory
        run: |
          mkdir -p bin
          cp target/release/vl-convert bin/
          cp LICENSE bin/
          cp thirdparty_* bin/
          zip -r vl-convert_linux-64.zip bin/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vl-convert-linux-x86
          path: |
            vl-convert_linux-64.zip

  build-cli-linux-aarch64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64
      - name: Cache
        uses: actions/cache@v3
        with:
          key: build-cli-linux-aarch64-${{ hashFiles('Cargo.lock') }}
          path: |
            cargo-arm64
            target-arm64
      - name: Build in Docker
        run: |
          docker run \
            --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            --platform linux/arm64 \
            --env CARGO_TARGET_DIR=/workspace/target-arm64 \
            --env CARGO_HOME=/workspace/cargo-arm64 \
            --env LIBSQLITE3_SYS_BUNDLING=1 \
            --env LIBSQLITE3_SYS_USE_BINDGEN=0 \
            --env CARGO_FEATURE_FLAGS="ring/use_heap" \
            --env CC=clang \
            --env CXX=clang++ \
            rust:1.87-slim-bookworm \
            bash -c "\
              uname -a && \
              apt update -y && \
              apt install cmake curl zip unzip pkg-config perl make gcc g++ -y && \
              # Install newer clang
              apt install -y clang libclang-dev llvm-dev && \
              clang --version && \
              curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v24.0/protoc-24.0-linux-aarch_64.zip && \
              unzip protoc-24.0-linux-aarch_64.zip -d /usr/ && \
              which protoc && \
              cargo build --release -p vl-convert && \
              rm -rf bin/ && \
              rm -rf vl-convert_linux-aarch64.zip && \
              mkdir -p bin/ && \
              cp target-arm64/release/vl-convert bin/ && \
              cp LICENSE bin/ && \
              cp thirdparty_* bin/ && \
              zip -r vl-convert_linux-aarch64.zip bin/
            "
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: vl-convert-linux-aarch64
          path: |
            vl-convert_linux-aarch64.zip

  build-cli-win-64:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build vl-convert
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p vl-convert --release
      - name: Move executable to bin directory
        run: |
          New-Item -Path "artifacts\bin" -ItemType Directory
          Copy-Item "target\release\vl-convert.exe" -Destination "artifacts\bin"
          Copy-Item "LICENSE" -Destination "artifacts\bin"
          Copy-Item "thirdparty_*" -Destination "artifacts\bin"
      - name: zip executable
        uses: papeloto/action-zip@v1
        with:
          files: artifacts/
          dest: vl-convert_win-64.zip
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vl-convert-win-64
          path: |
            vl-convert_win-64.zip

  build-cli-osx-64:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build vl-convert
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p vl-convert --release
      - name: Move executable to bin directory
        run: |
          mkdir -p bin
          cp target/release/vl-convert bin/
          cp LICENSE bin/
          cp thirdparty_* bin/
          zip -r vl-convert_osx-64.zip bin/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vl-convert-osx-64
          path: |
            vl-convert_osx-64.zip

  build-cli-osx-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build vl-convert
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p vl-convert --release
      - name: Move executable to bin directory
        run: |
          mkdir -p bin
          cp target/release/vl-convert bin/
          cp LICENSE bin/
          cp thirdparty_* bin/
          zip -r vl-convert_osx-arm64.zip bin/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vl-convert-osx-arm64
          path: |
            vl-convert_osx-arm64.zip

  # Update Python test jobs to use built wheels instead of pixi
  vl-convert-python-tests-linux:
    runs-on: ubuntu-latest
    needs: [build-wheels-linux-x86_64]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install fonts on Linux
        run: |
          echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
          sudo apt-get install ttf-mscorefonts-installer
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist/
      - name: Install wheel
        run: |
          pip install pytest scikit-image pypdfium2
          # Find and install the appropriate wheel based on platform
          python -m pip install --find-links=dist vl_convert_python
      - name: Run tests
        run: |
          cd vl-convert-python
          python -m pytest

  vl-convert-python-tests-windows:
    runs-on: windows-2022
    needs: [build-wheels-win-64]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-win-64
          path: dist/
      - name: Install wheel
        shell: pwsh
        run: |
          pip install pytest scikit-image pypdfium2
          # Find and install the appropriate wheel based on platform
          python -m pip install --find-links=dist vl_convert_python
      - name: Run tests
        shell: pwsh
        run: |
          cd vl-convert-python
          python -m pytest

  vl-convert-python-tests-macos:
    runs-on: macos-12
    needs: [build-wheels-osx-64]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-osx-64
          path: dist/
      - name: Install wheel
        run: |
          pip install pytest scikit-image pypdfium2
          # Find and install the appropriate wheel based on platform
          python -m pip install --find-links=dist vl_convert_python
      - name: Run tests
        run: |
          cd vl-convert-python
          python -m pytest

  # PyPI publishing job - only runs on main branch
  publish-pypi:
    name: Publish to PyPI
    if: github.ref == 'refs/heads/main'
    environment: PyPI Upload
    runs-on: ubuntu-latest
    needs:
      [
        build-wheels-linux-x86_64,
        build-wheels-linux-aarch64,
        build-wheels-win-64,
        build-wheels-osx-64,
        build-wheels-osx-arm64,
        vl-convert-python-tests-linux,
        vl-convert-python-tests-windows,
        vl-convert-python-tests-macos,
      ]
    steps:
      - name: Download Linux x86_64 wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist/
      - name: Download Linux aarch64 wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-aarch64
          path: dist/
      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-win-64
          path: dist/
      - name: Download macOS x86_64 wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-osx-64
          path: dist/
      - name: Download macOS arm64 wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-osx-arm64
          path: dist/
      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing dist/*

import{Transform as l,isTuple as K,ingest as P,stableCompare as M,tupleid as m}from"/-/vega-dataflow@v5.7.5-asKYS4gpPLMPf64pSozt/dist=es2020,mode=imports,min/optimized/vega-dataflow.js";import{inherits as f,error as c,array as N,one as j,hasOwnProperty as U,truthy as A}from"/-/vega-util@v1.17.1-uwuqwLZrXXBeO0DFYRgh/dist=es2020,mode=imports,min/optimized/vega-util.js";import{hierarchy as I,pack as $,partition as F,stratify as B,treemap as X,tree as Y,cluster as H,treemapBinary as V,treemapDice as W,treemapSlice as Z,treemapSliceDice as G,treemapSquarify as J,treemapResquarify as Q}from"/-/d3-hierarchy@v3.1.2-wx7sW10pU4OkfBLgCDCU/dist=es2020,mode=imports,min/optimized/d3-hierarchy.js";function h(e,t,n){const s={};return e.each(a=>{const r=a.data;n(r)&&(s[t(r)]=a)}),e.lookup=s,e}function g(e){l.call(this,null,e)}g.Definition={type:"Nest",metadata:{treesource:!0,changes:!0},params:[{name:"keys",type:"field",array:!0},{name:"generate",type:"boolean"}]};const _=e=>e.values;f(g,l,{transform(e,t){t.source||c("Nest transform requires an upstream data source.");var n=e.generate,s=e.modified(),a=t.clone(),r=this.value;return(!r||s||t.changed())&&(r&&r.each(i=>{i.children&&K(i.data)&&a.rem.push(i.data)}),this.value=r=I({values:N(e.keys).reduce((i,o)=>(i.key(o),i),ee()).entries(a.source)},_),n&&r.each(i=>{i.children&&(i=P(i.data),a.add.push(i),a.source.push(i))}),h(r,m,m)),a.source.root=r,a}});function ee(){const e=[],t={entries:a=>s(n(a,0),0),key:a=>(e.push(a),t)};function n(a,r){if(r>=e.length)return a;const i=a.length,o=e[r++],d={},x={};let R=-1,p,y,w;for(;++R<i;)p=o(y=a[R])+"",(w=d[p])?w.push(y):d[p]=[y];for(p in d)x[p]=n(d[p],r);return x}function s(a,r){if(++r>e.length)return a;const i=[];for(const o in a)i.push({key:o,values:s(a[o],r)});return i}return t}function u(e){l.call(this,null,e)}const te=(e,t)=>e.parent===t.parent?1:2;f(u,l,{transform(e,t){(!t.source||!t.source.root)&&c(this.constructor.name+" transform requires a backing tree data source.");const n=this.layout(e.method),s=this.fields,a=t.source.root,r=e.as||s;e.field?a.sum(e.field):a.count(),e.sort&&a.sort(M(e.sort,i=>i.data)),ae(n,this.params,e),n.separation&&n.separation(e.separation!==!1?te:j);try{this.value=n(a)}catch(i){c(i)}return a.each(i=>re(i,s,r)),t.reflow(e.modified()).modifies(r).modifies("leaf")}});function ae(e,t,n){for(let s,a=0,r=t.length;a<r;++a)s=t[a],s in n&&e[s](n[s])}function re(e,t,n){const s=e.data,a=t.length-1;for(let r=0;r<a;++r)s[n[r]]=e[t[r]];s[n[a]]=e.children?e.children.length:0}const k=["x","y","r","depth","children"];function v(e){u.call(this,e)}v.Definition={type:"Pack",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"radius",type:"field",default:null},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:k.length,default:k}]},f(v,u,{layout:$,params:["radius","size","padding"],fields:k});const b=["x0","y0","x1","y1","depth","children"];function z(e){u.call(this,e)}z.Definition={type:"Partition",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:b.length,default:b}]},f(z,u,{layout:F,params:["size","round","padding"],fields:b});function D(e){l.call(this,null,e)}D.Definition={type:"Stratify",metadata:{treesource:!0},params:[{name:"key",type:"field",required:!0},{name:"parentKey",type:"field",required:!0}]},f(D,l,{transform(e,t){t.source||c("Stratify transform requires an upstream data source.");let n=this.value;const s=e.modified(),a=t.fork(t.ALL).materialize(t.SOURCE),r=!n||s||t.changed(t.ADD_REM)||t.modified(e.key.fields)||t.modified(e.parentKey.fields);return a.source=a.source.slice(),r&&(n=a.source.length?h(B().id(e.key).parentId(e.parentKey)(a.source),e.key,A):h(B()([{}]),e.key,e.key)),a.source.root=this.value=n,a}});const C={tidy:Y,cluster:H},O=["x","y","depth","children"];function q(e){u.call(this,e)}q.Definition={type:"Tree",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"tidy",values:["tidy","cluster"]},{name:"size",type:"number",array:!0,length:2},{name:"nodeSize",type:"number",array:!0,length:2},{name:"separation",type:"boolean",default:!0},{name:"as",type:"string",array:!0,length:O.length,default:O}]},f(q,u,{layout(e){const t=e||"tidy";if(U(C,t))return C[t]();c("Unrecognized Tree layout method: "+t)},params:["size","nodeSize"],fields:O});function S(e){l.call(this,[],e)}S.Definition={type:"TreeLinks",metadata:{tree:!0,generates:!0,changes:!0},params:[]},f(S,l,{transform(e,t){const n=this.value,s=t.source&&t.source.root,a=t.fork(t.NO_SOURCE),r={};return s||c("TreeLinks transform requires a tree data source."),t.changed(t.ADD_REM)?(a.rem=n,t.visit(t.SOURCE,i=>r[m(i)]=1),s.each(i=>{const o=i.data,d=i.parent&&i.parent.data;d&&r[m(o)]&&r[m(d)]&&a.add.push(P({source:d,target:o}))}),this.value=a.add):t.changed(t.MOD)&&(t.visit(t.MOD,i=>r[m(i)]=1),n.forEach(i=>{(r[m(i.source)]||r[m(i.target)])&&a.mod.push(i)})),a}});const E={binary:V,dice:W,slice:Z,slicedice:G,squarify:J,resquarify:Q},T=["x0","y0","x1","y1","depth","children"];function L(e){u.call(this,e)}L.Definition={type:"Treemap",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"squarify",values:["squarify","resquarify","binary","dice","slice","slicedice"]},{name:"padding",type:"number",default:0},{name:"paddingInner",type:"number",default:0},{name:"paddingOuter",type:"number",default:0},{name:"paddingTop",type:"number",default:0},{name:"paddingRight",type:"number",default:0},{name:"paddingBottom",type:"number",default:0},{name:"paddingLeft",type:"number",default:0},{name:"ratio",type:"number",default:1.618033988749895},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:T.length,default:T}]},f(L,u,{layout(){const e=X();return e.ratio=t=>{const n=e.tile();n.ratio&&e.tile(n.ratio(t))},e.method=t=>{U(E,t)?e.tile(E[t]):c("Unrecognized Treemap layout method: "+t)},e},params:["method","ratio","size","round","padding","paddingInner","paddingOuter","paddingTop","paddingRight","paddingBottom","paddingLeft"],fields:T});export{g as nest,v as pack,z as partition,D as stratify,q as tree,S as treelinks,L as treemap};export default null;

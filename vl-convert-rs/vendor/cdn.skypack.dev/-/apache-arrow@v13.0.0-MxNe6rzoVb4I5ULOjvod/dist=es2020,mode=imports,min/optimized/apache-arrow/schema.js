import{D as h}from"../common/type-9c6ae821.js";import"./enum.js";class l{constructor(t=[],n,e){this.fields=t||[],this.metadata=n||new Map,e||(e=m(t)),this.dictionaries=e}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return`Schema<{ ${this.fields.map((t,n)=>`${n}: ${t}`).join(", ")} }>`}select(t){const n=new Set(t),e=this.fields.filter(i=>n.has(i.name));return new l(e,this.metadata)}selectAt(t){const n=t.map(e=>this.fields[e]).filter(Boolean);return new l(n,this.metadata)}assign(...t){const n=t[0]instanceof l?t[0]:Array.isArray(t[0])?new l(t[0]):new l(t),e=[...this.fields],i=r(r(new Map,this.metadata),n.metadata),a=n.fields.filter(p=>{const d=e.findIndex(c=>c.name===p.name);return~d?(e[d]=p.clone({metadata:r(r(new Map,e[d].metadata),p.metadata)}))&&!1:!0}),u=m(a,new Map);return new l([...e,...a],i,new Map([...this.dictionaries,...u]))}}l.prototype.fields=null,l.prototype.metadata=null,l.prototype.dictionaries=null;class o{static new(...t){let[n,e,i,a]=t;return t[0]&&typeof t[0]=="object"&&({name:n}=t[0],e===void 0&&(e=t[0].type),i===void 0&&(i=t[0].nullable),a===void 0&&(a=t[0].metadata)),new o(`${n}`,e,i,a)}constructor(t,n,e=!1,i){this.name=t,this.type=n,this.nullable=e,this.metadata=i||new Map}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return`${this.name}: ${this.type}`}clone(...t){let[n,e,i,a]=t;return!t[0]||typeof t[0]!="object"?[n=this.name,e=this.type,i=this.nullable,a=this.metadata]=t:{name:n=this.name,type:e=this.type,nullable:i=this.nullable,metadata:a=this.metadata}=t[0],o.new(n,e,i,a)}}o.prototype.type=null,o.prototype.name=null,o.prototype.nullable=null,o.prototype.metadata=null;function r(s,t){return new Map([...s||new Map,...t||new Map])}function m(s,t=new Map){for(let n=-1,e=s.length;++n<e;){const i=s[n],a=i.type;if(h.isDictionary(a)){if(!t.has(a.id))t.set(a.id,a.dictionary);else if(t.get(a.id)!==a.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}a.children&&a.children.length>0&&m(a.children,t)}return t}export{o as Field,l as Schema};export default null;

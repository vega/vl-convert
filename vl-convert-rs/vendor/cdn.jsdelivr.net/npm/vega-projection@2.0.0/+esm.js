/**
 * Bundled by jsDelivr using Rollup v2.79.2 and Terser v5.39.0.
 * Original file: /npm/vega-projection@2.0.0/build/vega-projection.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{geoPath as t,geoAlbers as e,geoAlbersUsa as r,geoAzimuthalEqualArea as n,geoAzimuthalEquidistant as o,geoConicConformal as a,geoConicEqualArea as i,geoConicEquidistant as c,geoEqualEarth as l,geoEquirectangular as s,geoGnomonic as p,geoIdentity as u,geoMercator as m,geoNaturalEarth1 as f,geoOrthographic as h,geoStereographic as g,geoTransverseMercator as d}from"/npm/d3-geo@3.1.1/+esm";import{geoMollweide as q}from"/npm/d3-geo-projection@4.0.0/+esm";import{registerScale as y}from"/npm/vega-scale@8.0.0/+esm";const E=t(),b=["clipAngle","clipExtent","scale","translate","center","rotate","parallels","precision","reflectX","reflectY","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"];function w(e,r){if(!e||"string"!=typeof e)throw new Error("Projection type must be a name string.");return e=e.toLowerCase(),arguments.length>1?(x[e]=function(e,r){return function n(){const o=r();return o.type=e,o.path=t().projection(o),o.copy=o.copy||function(){const t=n();return b.forEach((e=>{o[e]&&t[e](o[e]())})),t.path.pointRadius(o.path.pointRadius()),t},y(o)}}(e,r),this):x[e]||null}function j(t){return t&&t.path||E}const x={albers:e,albersusa:r,azimuthalequalarea:n,azimuthalequidistant:o,conicconformal:a,conicequalarea:i,conicequidistant:c,equalEarth:l,equirectangular:s,gnomonic:p,identity:u,mercator:m,mollweide:q,naturalEarth1:f,orthographic:h,stereographic:g,transversemercator:d};for(const t in x)w(t,x[t]);export{j as getProjectionPath,w as projection,b as projectionProperties};export default null;
//# sourceMappingURL=/sm/7abe994764d8446cff79e6b4ad07b1c789f0effd819ed77c539750a3ee5651f7.map